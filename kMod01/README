PS Vertiefung Betriebssysteme Winter 2008/09


Team:
Rupert Gratz
Markus Kasinger


We have implemented:

- a message buffering char device driver mbcd that buffers messages in the memory. Interaction is possible by using the device /dev/mbcd.

- a producer process writing messages to the device

- a consumer process reading messages from the device

- a read- and write-counter-file in the proc file system



We have implemented this by using ANSI-C and only standard Linux-C-functions. What you find here is:

mbcd.c: the actual device driver featuring all necessary methods to enable inserting and removing the module and providing read/write-access to the "in-memory"-device.

mbcd.h: header-file for mbcd.c defining the used structures.

producer.c: the producer-userland-application. sends messages to the device.

consumer.c: the consumer-userland-application. reads messages from the device.

file.c, file.h: provides functionality for dealing with files.

mytypes.h: "features" a str(ing) type.

Makefile: features "make", "make producer", "make consumer".

mbcd_load.sh: inserts the module and creates the device /dev/mbcd.












