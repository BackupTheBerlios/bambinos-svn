/* imports */

COMPILER program


CHARACTERS

letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
digit     = "0123456789".
digitNonZero = "123456789".

hex       = "0123456789abcdef".

cr        = '\r'.
lf        = '\n'.
tab       = '\t'.

char  = ANY - '"' - '\\' - '\'' - cr - lf. // muessen wir natuerlich umschreiben (Any weg!)

printable = '\u0020' .. '\u007e'.


TOKENS

// Das und die Schlusselworter sind unsere Tokens

//commentStart = /*".
//commentEnd = "*/".

// Hex fehlt noch

equal = '='.
greater = '>'.
smaller = '<'.
not = '!'.
AND = "&&".
OR = "||".

number = digitNonZero{digit}| "0".

simpleIdentifier = letter{letter|digit}.
StringValue = '"'char{char}'"'.

charValue = '\'' ( char | '\\' printable { hex } ) '\''. // umschreiben !

COMMENTS FROM "/*" TO "*/" NESTED // umschreiben 
COMMENTS FROM "//" TO cr lf

IGNORE cr + lf + tab


PRODUCTIONS


program
= [packageDeclaration] {packageImport} classDeclaration.

packageDeclaration = "package" identifier.
packageImport = "import" identifier [".*"].

classDeclaration = "public" "class" simpleIdentifier "{" classBlock "}".

classBlock = {datatypeDeclaration} {methodDeclaration}.

methodDeclaration = "public" "static" ("void"|datatype) simpleIdentifier"("[datatypeDescriptor{"," datatypeDescriptor}]")" "{" bodyBlock "}".

// datatypeDeclaration umgeschrieben, muss - sollte aber inhaltlich genau das selbe sein wie vorher
// ausser muss ab jetzt immer static sein.
datatypeDeclaration = "static" ["final"] datatypeDescriptor [ "=" ( expression | 
								"new" (( object "(" [expression] | "["number"]" ")" ) |  (primitive"["number"]")))].

assOrMethodCall = identifier (methodCall | assignment).
methodCall = "("[expression {"," expression}]")".
assignment = [arraySelector] "=" (expression | identifier "("[expression {"," expression}]")").

bodyBlock = { whileStatement | ifStatement | returnStatement | assOrMethodCall | datatypeDeclaration  }.

whileStatement = "while" "(" condition ")" "{" bodyBlock "}".
ifStatement = "if" "(" condition ")" "{" bodyBlock "}" [ "else" "{" bodyBlock "}" ].
returnStatement = "return" expression.

datatypeDescriptor = datatype identifier [arraySelector].

identifier = simpleIdentifier{'.' simpleIdentifier}.
arraySelector = "[" [expression] "]".


value = identifier [arraySelector] | intValue | charValue | booleanValue | StringValue | "NULL" | not value.
factor = value {('*' | '/' | '%') value}.
term = factor {("+" | "-") factor}.
expression = term {(AND|OR) term}.
condition = expression [(equal equal | not equal | greater | greater equal | smaller | smaller equal) expression].

intValue = ["-"]number.
booleanValue = "true" | "false".

primitive = "int" | "boolean" | "char".
object = "String" | identifier.

datatype = primitive | object.

END program.

 // TODO folgender Fehlermeldung noch aufloesen. Mit der 1. weiss ich noch nicht genau was los ist. Siehe Coco UserManual
 
 // LL1 warning in datatypeDeclaration: simpleIdentifier is start & successor of deletable structure
 // LL1 warning in assignment: simpleIdentifier is start of several alternatives
 // LL1 warning in condition: greater is start of several alternatives
 // LL1 warning in condition: smaller is start of several alternatives


