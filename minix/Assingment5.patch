diff -uprbBN minix_original/src/include/minix/callnr.h minixx/src/include/minix/callnr.h
--- minix_original/src/include/minix/callnr.h	2009-01-03 17:37:27.000000000 +0100
+++ minixx/src/include/minix/callnr.h	2009-01-04 17:38:47.000000000 +0100
@@ -47,6 +47,8 @@
 #define LSTAT		  50
 #define IOCTL		  54
 #define FCNTL		  55
+#define GETSCHEDULER  57	/* to PM */
+#define SETSCHEDULER  58	/* to PM */
 #define EXEC		  59
 #define UMASK		  60 
 #define CHROOT		  61 
diff -uprbBN minix_original/src/include/minix/com.h minixx/src/include/minix/com.h
--- minix_original/src/include/minix/com.h	2009-01-03 17:37:27.000000000 +0100
+++ minixx/src/include/minix/com.h	2009-01-05 19:30:06.000000000 +0100
@@ -278,8 +278,9 @@
 #  define SYS_IOPENABLE  (KERNEL_CALL + 28)	/* sys_enable_iop() */
 #  define SYS_VM_SETBUF  (KERNEL_CALL + 29)	/* sys_vm_setbuf() */
 #  define SYS_VM_MAP  	 (KERNEL_CALL + 30)	/* sys_vm_map() */
+#  define SYS_SETSCHEDULER	(KERNEL_CALL + 31)	/* sys_setscheduler() */
 
-#define NR_SYS_CALLS	31	/* number of system calls */ 
+#define NR_SYS_CALLS	32	/* number of system calls */
 
 /* Subfunctions for SYS_PRIVCTL */
 #define SYS_PRIV_INIT		1	/* Initialize a privilege structure */
@@ -433,6 +434,7 @@
 /* Field names for SYS_FORK, _EXEC, _EXIT, _NEWMAP. */
 #define PR_ENDPT       m1_i1	/* indicates a process */
 #define PR_PRIORITY    m1_i2	/* process priority */
+#define PR_SCHED_POLICY	m1_i2	/* process scheduling policy */
 #define PR_SLOT        m1_i2	/* indicates a process slot */
 #define PR_PID	       m1_i3	/* process id at process manager */
 #define PR_STACK_PTR   m1_p1	/* used for stack ptr in sys_exec, sys_getsp */
diff -uprbBN minix_original/src/include/minix/syslib.h minixx/src/include/minix/syslib.h
--- minix_original/src/include/minix/syslib.h	2009-01-03 17:37:27.000000000 +0100
+++ minixx/src/include/minix/syslib.h	2009-01-05 19:30:06.000000000 +0100
@@ -37,6 +37,8 @@ _PROTOTYPE( int sys_trace, (int req, int
 _PROTOTYPE( int sys_privctl, (int proc, int req, int i, void *p));
 _PROTOTYPE( int sys_nice, (int proc, int priority));
 
+_PROTOTYPE( int sys_setscheduler, (int proc, int priority));
+
 _PROTOTYPE( int sys_int86, (struct reg86u *reg86p));
 _PROTOTYPE( int sys_vm_setbuf, (phys_bytes base, phys_bytes size,
 							phys_bytes high));
diff -uprbBN minix_original/src/include/sys/resource.h minixx/src/include/sys/resource.h
--- minix_original/src/include/sys/resource.h	2009-01-03 17:39:29.000000000 +0100
+++ minixx/src/include/sys/resource.h	2009-01-04 17:38:47.000000000 +0100
@@ -15,7 +15,17 @@
 #define PRIO_PGRP	1
 #define PRIO_USER	2
 
+/* Scheduling policies */
+#define SCHED_OTHER 0
+#define SCHED_FIFO 1
+#define SCHED_RR 2
+
+
 int getpriority(int, int);
 int setpriority(int, int, int);
 
+int sched_getscheduler(pid_t);
+int sched_setscheduler(pid_t, int, int);
+
+
 #endif
diff -uprbBN minix_original/src/kernel/config.h minixx/src/kernel/config.h
--- minix_original/src/kernel/config.h	2009-01-03 17:41:36.000000000 +0100
+++ minixx/src/kernel/config.h	2009-01-05 19:30:06.000000000 +0100
@@ -36,6 +36,7 @@
 #define USE_SEGCTL     	   1	/* set up a remote segment */
 #define USE_PRIVCTL    	   1	/* system privileges control */
 #define USE_NICE 	   1	/* change scheduling priority */
+#define USE_SETSCHEDULER   1	/* change scheduling policy */
 #define USE_UMAP       	   1	/* map virtual to physical address */
 #define USE_VIRCOPY   	   1	/* copy using virtual addressing */ 
 #define USE_VIRVCOPY  	   1	/* vector with virtual copy requests */
diff -uprbBN minix_original/src/kernel/proc.h minixx/src/kernel/proc.h
--- minix_original/src/kernel/proc.h	2009-01-03 17:43:36.000000000 +0100
+++ minixx/src/kernel/proc.h	2009-01-05 19:30:06.000000000 +0100
@@ -57,6 +57,8 @@ struct proc {
 #if DEBUG_SCHED_CHECK
   int p_ready, p_found;
 #endif
+
+  char p_scheduler;		/* current scheduling policy*/
 };
 
 /* Bits for the runtime flags. A process is runnable iff p_rts_flags == 0. */
diff -uprbBN minix_original/src/kernel/system/do_setscheduler.c minixx/src/kernel/system/do_setscheduler.c
--- minix_original/src/kernel/system/do_setscheduler.c	1970-01-01 01:00:00.000000000 +0100
+++ minixx/src/kernel/system/do_setscheduler.c	2009-01-05 19:41:37.000000000 +0100
@@ -0,0 +1,38 @@
+/* The kernel call implemented in this file:
+ *   m_type:	SYS_SETSCHEDULER
+ *
+ * The parameters for this kernel call are:
+ *    m1_i1:	PR_ENDPT   	process number to change priority
+ *    m1_i2:	PR_POLICY	the new policy
+ */
+
+#include "../system.h"
+#include <minix/type.h>
+#include <sys/resource.h>
+
+#if USE_SETSCHEDULER
+
+PUBLIC int do_setscheduler(message *m_ptr) {
+	/* Change process priority or stop the process. */
+	int proc_nr, policy, new_q;
+	register struct proc *rp;
+
+	/* Extract the message parameters and do sanity checking. */
+	if (!isokendpt(m_ptr->PR_ENDPT, &proc_nr))
+		return EINVAL;
+	if (iskerneln(proc_nr)) return (EPERM);
+	policy = m_ptr->PR_SCHED_POLICY;
+	rp = proc_addr(proc_nr);
+
+	lock_dequeue(rp);
+	rp->p_scheduler = policy;
+	if (!rp->p_rts_flags)
+		lock_enqueue(rp);
+
+	/* return (OK); */
+	return (rp->p_scheduler);
+
+}
+
+#endif /* USE_SETSCHEDULER */
+
diff -uprbBN minix_original/src/kernel/system/Makefile minixx/src/kernel/system/Makefile
--- minix_original/src/kernel/system/Makefile	2009-01-03 17:44:12.000000000 +0100
+++ minixx/src/kernel/system/Makefile	2009-01-05 19:30:06.000000000 +0100
@@ -24,6 +24,7 @@ OBJECTS	= \
 	$(SYSTEM)(do_exit.o) \
 	$(SYSTEM)(do_trace.o) \
 	$(SYSTEM)(do_nice.o) \
+	$(SYSTEM)(do_setscheduler.o) \
 	$(SYSTEM)(do_times.o) \
 	$(SYSTEM)(do_setalarm.o) \
 	$(SYSTEM)(do_irqctl.o) \
@@ -82,6 +83,10 @@ $(SYSTEM)(do_trace.o):	do_trace.c
 $(SYSTEM)(do_nice.o):	do_nice.c
 	$(CC) do_nice.c
 
+
+$(SYSTEM)(do_setscheduler.o):	do_setscheduler.c
+	$(CC) do_setscheduler.c
+
 $(SYSTEM)(do_times.o):	do_times.c
 	$(CC) do_times.c
 
diff -uprbBN minix_original/src/kernel/system.c minixx/src/kernel/system.c
--- minix_original/src/kernel/system.c	2009-01-03 17:44:29.000000000 +0100
+++ minixx/src/kernel/system.c	2009-01-05 19:30:06.000000000 +0100
@@ -140,6 +140,7 @@ PRIVATE void initialize(void)
   map(SYS_EXEC, do_exec);		/* update process after execute */
   map(SYS_EXIT, do_exit);		/* clean up after process exit */
   map(SYS_NICE, do_nice);		/* set scheduling priority */
+  map(SYS_SETSCHEDULER, do_setscheduler);		/* set scheduling policy */
   map(SYS_PRIVCTL, do_privctl);		/* system privileges control */
   map(SYS_TRACE, do_trace);		/* request a trace operation */
 
diff -uprbBN minix_original/src/kernel/system.h minixx/src/kernel/system.h
--- minix_original/src/kernel/system.h	2009-01-03 17:44:35.000000000 +0100
+++ minixx/src/kernel/system.h	2009-01-05 19:30:06.000000000 +0100
@@ -69,6 +69,12 @@ _PROTOTYPE( int do_nice, (message *m_ptr
 #define do_nice do_unused
 #endif
 
+_PROTOTYPE( int do_setscheduler, (message *m_ptr) );
+#if ! USE_SETSCHEDULER
+#define do_setscheduler do_unused
+#endif
+
+
 _PROTOTYPE( int do_copy, (message *m_ptr) );	
 #define do_vircopy 	do_copy
 #define do_physcopy 	do_copy
diff -uprbBN minix_original/src/lib/posix/Makefile minixx/src/lib/posix/Makefile
--- minix_original/src/lib/posix/Makefile	2009-01-03 17:55:23.000000000 +0100
+++ minixx/src/lib/posix/Makefile	2009-01-04 17:38:47.000000000 +0100
@@ -115,6 +115,7 @@ all-ack: ../obj-ack//libc.a
 ../obj-ack//libc.a: ../obj-ack//libc.a(getopt.o)
 ../obj-ack//libc.a: ../obj-ack//libc.a(gettimeofday.o)
 ../obj-ack//libc.a: ../obj-ack//libc.a(priority.o)
+../obj-ack//libc.a: ../obj-ack//libc.a(scheduler.o)
 ../obj-ack//libc.a: ../obj-ack//libc.a(usleep.o)
 
 ../obj-ack//libc.a:
@@ -313,6 +314,8 @@ all-ack: ../obj-ack//libc.a
 	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./posix/gettimeofday.o gettimeofday.c
 ../obj-ack//libc.a(priority.o): priority.c
 	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./posix/priority.o priority.c
+../obj-ack//libc.a(scheduler.o): scheduler.c
+	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./posix/scheduler.o scheduler.c
 ../obj-ack//libc.a(usleep.o): usleep.c
 	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./posix/usleep.o usleep.c
 
@@ -414,6 +417,7 @@ all-gnu: ../obj-gnu/libc.a
 ../obj-gnu/libc.a: ../obj-gnu/./posix/getopt.o
 ../obj-gnu/libc.a: ../obj-gnu/./posix/gettimeofday.o
 ../obj-gnu/libc.a: ../obj-gnu/./posix/priority.o
+../obj-gnu/libc.a: ../obj-gnu/./posix/scheduler.o
 ../obj-gnu/libc.a: ../obj-gnu/./posix/usleep.o
 
 ../obj-gnu/libc.a:
@@ -707,6 +711,10 @@ all-gnu: ../obj-gnu/libc.a
 ../obj-gnu/./posix/priority.o: priority.c
 	gcc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-gnu/./posix/priority.o priority.c
 
+../obj-gnu/./posix/scheduler.o: scheduler.c
+	gcc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-gnu/./posix/scheduler.o scheduler.c
+	
+
 ../obj-gnu/./posix/usleep.o: usleep.c
 	gcc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-gnu/./posix/usleep.o usleep.c
 
diff -uprbBN minix_original/src/lib/posix/scheduler.c minixx/src/lib/posix/scheduler.c
--- minix_original/src/lib/posix/scheduler.c	1970-01-01 01:00:00.000000000 +0100
+++ minixx/src/lib/posix/scheduler.c	2009-01-04 17:47:25.000000000 +0100
@@ -0,0 +1,37 @@
+/*
+priority.c
+*/
+
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/resource.h>
+#include <lib.h>
+#include <unistd.h>
+#include <string.h>
+#include <stddef.h>
+
+
+int sched_getscheduler(pid_t pid)
+{
+	int v;
+	message m;
+
+	/* m.m1_i1 = which; */
+	m.m1_i2 = pid; /* who */
+
+	return _syscall(MM, GETSCHEDULER, &m);
+
+}
+
+int sched_setscheduler(pid_t pid, int policy, int priority)
+{
+	message m;
+
+	m.m1_i1 = policy;
+	m.m1_i2 = pid;
+	m.m1_i3 = priority;
+
+	return _syscall(MM, SETSCHEDULER, &m);
+	/* return _syscall(MM, SETPRIORITY, &m); */
+}
+
diff -uprbBN minix_original/src/lib/syscall/getscheduler.s minixx/src/lib/syscall/getscheduler.s
--- minix_original/src/lib/syscall/getscheduler.s	1970-01-01 01:00:00.000000000 +0100
+++ minixx/src/lib/syscall/getscheduler.s	2009-01-04 17:38:47.000000000 +0100
@@ -0,0 +1,7 @@
+.sect .text
+.extern	_getscheduler
+.define	getscheduler
+.align 2
+
+getscheduler:
+	jmp	_getscheduler
diff -uprbBN minix_original/src/lib/syscall/setscheduler.s minixx/src/lib/syscall/setscheduler.s
--- minix_original/src/lib/syscall/setscheduler.s	1970-01-01 01:00:00.000000000 +0100
+++ minixx/src/lib/syscall/setscheduler.s	2009-01-04 17:38:47.000000000 +0100
@@ -0,0 +1,7 @@
+.sect .text
+.extern	_setscheduler
+.define	setscheduler
+.align 2
+
+setscheduler:
+	jmp	_setscheduler
diff -uprbBN minix_original/src/lib/syslib/Makefile minixx/src/lib/syslib/Makefile
--- minix_original/src/lib/syslib/Makefile	2009-01-03 17:58:11.000000000 +0100
+++ minixx/src/lib/syslib/Makefile	2009-01-05 19:30:06.000000000 +0100
@@ -52,6 +52,7 @@ all-ack: ../obj-ack//libsys.a
 ../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_memset.o)
 ../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_newmap.o)
 ../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_nice.o)
+../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_setscheduler.o)
 ../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_out.o)
 ../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_physcopy.o)
 ../obj-ack//libsys.a: ../obj-ack//libsys.a(sys_sdevio.o)
@@ -144,6 +145,8 @@ all-ack: ../obj-ack//libsys.a
 	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./syslib/sys_newmap.o sys_newmap.c
 ../obj-ack//libsys.a(sys_nice.o): sys_nice.c
 	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./syslib/sys_nice.o sys_nice.c
+../obj-ack//libsys.a(sys_setscheduler.o): sys_setscheduler.c
+	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./syslib/sys_setscheduler.o sys_setscheduler.c
 ../obj-ack//libsys.a(sys_out.o): sys_out.c
 	cc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-ack//./syslib/sys_out.o sys_out.c
 ../obj-ack//libsys.a(sys_physcopy.o): sys_physcopy.c
@@ -222,6 +225,7 @@ all-gnu: ../obj-gnu/libsys.a
 ../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_memset.o
 ../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_newmap.o
 ../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_nice.o
+../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_setscheduler.o
 ../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_out.o
 ../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_physcopy.o
 ../obj-gnu/libsys.a: ../obj-gnu/./syslib/sys_sdevio.o
@@ -346,6 +350,9 @@ all-gnu: ../obj-gnu/libsys.a
 ../obj-gnu/./syslib/sys_nice.o: sys_nice.c
 	gcc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-gnu/./syslib/sys_nice.o sys_nice.c
 
+../obj-gnu/./syslib/sys_setscheduler.o: sys_setscheduler.c
+	gcc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-gnu/./syslib/sys_setscheduler.o sys_setscheduler.c
+	
 ../obj-gnu/./syslib/sys_out.o: sys_out.c
 	gcc -O -D_MINIX -D_POSIX_SOURCE -c -o ../obj-gnu/./syslib/sys_out.o sys_out.c
 
diff -uprbBN minix_original/src/lib/syslib/sys_setscheduler.c minixx/src/lib/syslib/sys_setscheduler.c
--- minix_original/src/lib/syslib/sys_setscheduler.c	1970-01-01 01:00:00.000000000 +0100
+++ minixx/src/lib/syslib/sys_setscheduler.c	2009-01-05 19:30:06.000000000 +0100
@@ -0,0 +1,10 @@
+#include "syslib.h"
+
+PUBLIC int sys_setscheduler(int proc, int policy)
+{
+  message m;
+
+  m.m1_i1 = proc;
+  m.m1_i2 = policy;
+  return(_taskcall(SYSTASK, SYS_SETSCHEDULER, &m));
+}
diff -uprbBN minix_original/src/servers/pm/main.c minixx/src/servers/pm/main.c
--- minix_original/src/servers/pm/main.c	2009-01-03 18:06:45.000000000 +0100
+++ minixx/src/servers/pm/main.c	2009-01-04 17:38:47.000000000 +0100
@@ -226,6 +226,7 @@ PRIVATE void pm_init()
   		strncpy(rmp->mp_name, ip->proc_name, PROC_NAME_LEN); 
 		rmp->mp_parent = RS_PROC_NR;
 		rmp->mp_nice = get_nice_value(ip->priority);
+		rmp->mp_sched_policy=SCHED_OTHER;
   		sigemptyset(&rmp->mp_sig2mess);
   		sigemptyset(&rmp->mp_ignore);	
   		sigemptyset(&rmp->mp_sigmask);
diff -uprbBN minix_original/src/servers/pm/misc.c minixx/src/servers/pm/misc.c
--- minix_original/src/servers/pm/misc.c	2009-01-03 18:06:45.000000000 +0100
+++ minixx/src/servers/pm/misc.c	2009-01-05 19:53:43.000000000 +0100
@@ -264,6 +264,48 @@ PUBLIC int do_getsetpriority()
 }
 
 /*===========================================================================*
+ *				do_getsetscheduler			     *
+ *===========================================================================*/
+PUBLIC int do_getsetscheduler()
+{
+	int arg_policy, arg_who, arg_pri;
+	int rmp_nr;
+	struct mproc *rmp;
+
+	arg_policy = m_in.m1_i1;
+	arg_who = m_in.m1_i2;
+	arg_pri = m_in.m1_i3;	/* for SETPRIORITY */
+
+	if (arg_who == 0)
+		rmp_nr = who_p;
+	else
+		if ((rmp_nr = proc_from_pid(arg_who)) < 0)
+			return(ESRCH);
+
+	rmp = &mproc[rmp_nr];
+
+	if (mp->mp_effuid != SUPER_USER &&
+	   mp->mp_effuid != rmp->mp_effuid && mp->mp_effuid != rmp->mp_realuid)
+		return EPERM;
+
+	/* If GET, that's it. */
+	if (call_nr == GETSCHEDULER) {
+		return(rmp->mp_sched_policy);
+	}
+
+	/* Only root is allowed to reduce the nice level. */
+	if (mp->mp_effuid != SUPER_USER)
+		return(EACCES);
+
+	/* We're SET, and it's allowed. Do it and tell kernel. */
+	rmp->mp_sched_policy = arg_policy;
+	return sys_setscheduler(rmp->mp_endpoint, arg_policy);
+
+}
+
+
+
+/*===========================================================================*
  *				do_svrctl				     *
  *===========================================================================*/
 PUBLIC int do_svrctl()
diff -uprbBN minix_original/src/servers/pm/mproc.h minixx/src/servers/pm/mproc.h
--- minix_original/src/servers/pm/mproc.h	2009-01-03 18:06:45.000000000 +0100
+++ minixx/src/servers/pm/mproc.h	2009-01-04 17:38:47.000000000 +0100
@@ -52,6 +52,7 @@ EXTERN struct mproc {
 
   /* Scheduling priority. */
   signed int mp_nice;		/* nice is PRIO_MIN..PRIO_MAX, standard 0. */
+  signed int mp_sched_policy;
 
   char mp_name[PROC_NAME_LEN];	/* process name */
 } mproc[NR_PROCS];
diff -uprbBN minix_original/src/servers/pm/proto.h minixx/src/servers/pm/proto.h
--- minix_original/src/servers/pm/proto.h	2009-01-03 18:06:45.000000000 +0100
+++ minixx/src/servers/pm/proto.h	2009-01-04 17:38:47.000000000 +0100
@@ -64,6 +64,7 @@ _PROTOTYPE( int do_svrctl, (void)					);
 _PROTOTYPE( int do_allocmem, (void)					);
 _PROTOTYPE( int do_freemem, (void)					);
 _PROTOTYPE( int do_getsetpriority, (void)					);
+_PROTOTYPE( int do_getsetscheduler, (void)					);
 _PROTOTYPE( ssize_t _read_pm, (int _fd, void *_buf, size_t _n, int s, int e));
 _PROTOTYPE( ssize_t _write_pm, (int _fd, void *_buf, size_t _n, int s, int e));
 
diff -uprbBN minix_original/src/servers/pm/table.c minixx/src/servers/pm/table.c
--- minix_original/src/servers/pm/table.c	2009-01-03 18:06:45.000000000 +0100
+++ minixx/src/servers/pm/table.c	2009-01-04 17:38:47.000000000 +0100
@@ -71,8 +71,8 @@ _PROTOTYPE (int (*call_vec[NCALLS]), (vo
 	no_sys,		/* 54 = ioctl	*/
 	no_sys,		/* 55 = fcntl	*/
 	no_sys,		/* 56 = (mpx)	*/
-	no_sys,		/* 57 = unused	*/
-	no_sys,		/* 58 = unused	*/
+	do_getsetscheduler,		/* 57 = getscheduler	*/
+	do_getsetscheduler,		/* 58 = setscheduler	*/
 	do_exec,	/* 59 = execve	*/
 	no_sys,		/* 60 = umask	*/
 	no_sys,		/* 61 = chroot	*/
diff -uprbBN minix_original/src/test/Makefile minixx/src/test/Makefile
--- minix_original/src/test/Makefile	2009-01-03 17:16:37.000000000 +0100
+++ minixx/src/test/Makefile	2009-01-05 19:30:06.000000000 +0100
@@ -7,7 +7,7 @@ OBJ=	test1  test2  test3  test4  test5  
 	test10        test12 test13 test14 test15 test16 test17 test18 test19 \
 	       test21 test22 test23        test25 test26 test27 test28 test29 \
 	test30 test31 test32        test34 test35 test36 test37 test38 test39 \
-	test40 test41 t10a t11a t11b
+	test40 test41 t10a t11a t11b test_scheduler
 
 BIGOBJ=  test20 test24
 ROOTOBJ= test11 test33
@@ -76,3 +76,4 @@ test38:	test38.c
 test39:	test39.c
 test40:	test40.c
 test41: test41.c
+test_scheduler: test_scheduler.c
diff -uprbBN minix_original/src/test/test_scheduler.c minixx/src/test/test_scheduler.c
--- minix_original/src/test/test_scheduler.c	1970-01-01 01:00:00.000000000 +0100
+++ minixx/src/test/test_scheduler.c	2009-01-06 11:51:52.000000000 +0100
@@ -0,0 +1,27 @@
+#include <lib.h>
+#include <stdio.h>
+#include "/usr/src/include/sys/resource.h"
+
+int mycall(int a, int b, int c) {
+
+	message m;
+	m.m1_i1 = a;
+	m.m1_i2 = b;
+	m.m1_i3 = c;
+
+	return (_syscall(MM,57, &m));
+
+}
+
+void main(int argc, char argv[]) {
+
+	int r1, r;
+	pid_t pid = 0;
+	if (argc > 1)
+		pid = atoi(argv[1]);
+
+	r1 = sched_setscheduler(pid,2,0);
+
+	r = sched_getscheduler(pid);
+	printf("r %d %d \n", r1, r);
+}
